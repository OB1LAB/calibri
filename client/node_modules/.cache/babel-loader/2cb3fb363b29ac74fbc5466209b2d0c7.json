{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OB1CHAM\\\\Desktop\\\\OB1LAB\\\\React\\\\calibri\\\\client\\\\src\\\\pages\\\\ActivityPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport SelectServer from \"../components/Selectors/SelectServer\";\nimport Loader from \"../components/Loader/Loader\";\nimport \"../styles/Activity.css\";\nimport ActivityService from \"../services/ActivityService\";\nimport PlayerList from \"../components/activity/PlayerList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ActivityPage() {\n  _s();\n  const [date1, setDate1] = useState(\"\");\n  const [date2, setDate2] = useState(\"\");\n  const [players, setPlayers] = useState({});\n  const [activity, setActivity] = useState({});\n  const [activityPlayers, setActivityPlayers] = useState({});\n  const [selectedServer, setselectedServer] = useState(\"dt\");\n  useEffect(() => {\n    const setUsers = async () => {\n      const response = await ActivityService.fetchPlayers();\n      if (response) {\n        setPlayers(response.data);\n        setDate1(response.data[\"monday\"]);\n        setDate2(response.data[selectedServer][\"lastDay\"]);\n      }\n    };\n    setUsers();\n    document.title = \"Игровая активность\";\n  }, []);\n  useEffect(() => {\n    Object.keys(players).length > 0 && setActivityPlayers(players[selectedServer][\"staff\"].map(player => {\n      return player.name;\n    }));\n  }, [players, selectedServer, date1, date2]);\n  useEffect(() => {\n    const getActivity = async () => {\n      const response = await ActivityService.fetchActivityPlayers(date1, date2, activityPlayers, selectedServer);\n      response && setActivity(response.data);\n    };\n    if (date1 && date2) {\n      getActivity();\n    }\n  }, [activityPlayers]);\n  if (Object.keys(activity).length === 0) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"activityCheck\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectServer\",\n      children: /*#__PURE__*/_jsxDEV(SelectServer, {\n        onChange: _ref => {\n          let {\n            value\n          } = _ref;\n          setselectedServer(value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerList, {\n      players: players,\n      activityPlayers: activityPlayers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(ActivityPage, \"9n4sNvLopFdTKkiwj7DswMsOxIw=\");\n_c = ActivityPage;\nvar _c;\n$RefreshReg$(_c, \"ActivityPage\");","map":{"version":3,"names":["React","useState","useEffect","SelectServer","Loader","ActivityService","PlayerList","ActivityPage","date1","setDate1","date2","setDate2","players","setPlayers","activity","setActivity","activityPlayers","setActivityPlayers","selectedServer","setselectedServer","setUsers","response","fetchPlayers","data","document","title","Object","keys","length","map","player","name","getActivity","fetchActivityPlayers","value"],"sources":["C:/Users/OB1CHAM/Desktop/OB1LAB/React/calibri/client/src/pages/ActivityPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SelectServer from \"../components/Selectors/SelectServer\";\r\nimport Loader from \"../components/Loader/Loader\";\r\nimport \"../styles/Activity.css\";\r\nimport ActivityService from \"../services/ActivityService\";\r\nimport PlayerList from \"../components/activity/PlayerList\";\r\n\r\nexport default function ActivityPage() {\r\n  const [date1, setDate1] = useState(\"\");\r\n  const [date2, setDate2] = useState(\"\");\r\n  const [players, setPlayers] = useState({});\r\n  const [activity, setActivity] = useState({});\r\n  const [activityPlayers, setActivityPlayers] = useState({});\r\n  const [selectedServer, setselectedServer] = useState(\"dt\");\r\n\r\n  useEffect(() => {\r\n    const setUsers = async () => {\r\n      const response = await ActivityService.fetchPlayers();\r\n      if (response) {\r\n        setPlayers(response.data);\r\n        setDate1(response.data[\"monday\"]);\r\n        setDate2(response.data[selectedServer][\"lastDay\"]);\r\n      }\r\n    };\r\n    setUsers();\r\n    document.title = \"Игровая активность\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    Object.keys(players).length > 0 &&\r\n      setActivityPlayers(\r\n        players[selectedServer][\"staff\"].map((player) => {\r\n          return player.name;\r\n        })\r\n      );\r\n  }, [players, selectedServer, date1, date2]);\r\n\r\n  useEffect(() => {\r\n    const getActivity = async () => {\r\n      const response = await ActivityService.fetchActivityPlayers(\r\n        date1,\r\n        date2,\r\n        activityPlayers,\r\n        selectedServer\r\n      );\r\n      response && setActivity(response.data);\r\n    };\r\n    if (date1 && date2) {\r\n      getActivity();\r\n    }\r\n  }, [activityPlayers]);\r\n\r\n  if (Object.keys(activity).length === 0) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"activityCheck\">\r\n      <div className=\"selectServer\">\r\n        <SelectServer\r\n          onChange={({ value }) => {\r\n            setselectedServer(value);\r\n          }}\r\n        />\r\n      </div>\r\n      <PlayerList players={players} activityPlayers={activityPlayers} />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}